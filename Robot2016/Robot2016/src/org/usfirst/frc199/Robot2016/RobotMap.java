// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc199.Robot2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftMotor;
    public static SpeedController drivetrainRightMotor;
    public static RobotDrive drivetrainRobotDrive;
    public static AnalogGyro drivetrainGyro;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static Ultrasonic drivetrainLeftUltrasonic;
    public static Ultrasonic drivetrainRightUltrasonic;
    public static Compressor drivetrainCompressor;
    public static SpeedController shooterLeftMotor;
    public static SpeedController shooterRightMotor;
    public static Encoder shooterLeftEncoder;
    public static Encoder shooterRightEncoder;
    public static Solenoid shooterRaisePiston;
    public static DoubleSolenoid shooterFeederPiston;
    public static SpeedController intakeRollerMotor;
    public static SpeedController intakePivotMotor;
    public static DigitalInput intakeUpperLimit;
    public static DigitalInput intakeLowerLimit;
    public static Solenoid climberExtendPiston;
    public static SpeedController climberWinchMotor;
    public static DigitalInput climberRungDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftMotor = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "LeftMotor", (Talon) drivetrainLeftMotor);
        
        drivetrainRightMotor = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "RightMotor", (Talon) drivetrainRightMotor);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftMotor, drivetrainRightMotor);
        
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);

        drivetrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drivetrain", "Gyro", drivetrainGyro);
        drivetrainGyro.setSensitivity(0.007);
        drivetrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "LeftEncoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RightEncoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivetrainLeftUltrasonic = new Ultrasonic(4, 5);
        LiveWindow.addSensor("Drivetrain", "LeftUltrasonic", drivetrainLeftUltrasonic);
        
        drivetrainRightUltrasonic = new Ultrasonic(6, 7);
        LiveWindow.addSensor("Drivetrain", "RightUltrasonic", drivetrainRightUltrasonic);
        
        drivetrainCompressor = new Compressor(0);
        
        
        shooterLeftMotor = new Talon(2);
        LiveWindow.addActuator("Shooter", "LeftMotor", (Talon) shooterLeftMotor);
        
        shooterRightMotor = new Talon(3);
        LiveWindow.addActuator("Shooter", "RightMotor", (Talon) shooterRightMotor);
        
        shooterLeftEncoder = new Encoder(8, 9, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "LeftEncoder", shooterLeftEncoder);
        shooterLeftEncoder.setDistancePerPulse(1.0);
        shooterLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterRightEncoder = new Encoder(10, 11, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "RightEncoder", shooterRightEncoder);
        shooterRightEncoder.setDistancePerPulse(1.0);
        shooterRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterRaisePiston = new Solenoid(0, 0);
        LiveWindow.addActuator("Shooter", "RaisePiston", shooterRaisePiston);
        
        shooterFeederPiston = new DoubleSolenoid(0, 1, 2);
        LiveWindow.addActuator("Shooter", "FeederPiston", shooterFeederPiston);
        
        intakeRollerMotor = new Talon(4);
        LiveWindow.addActuator("Intake", "RollerMotor", (Talon) intakeRollerMotor);
        
        intakePivotMotor = new Talon(5);
        LiveWindow.addActuator("Intake", "PivotMotor", (Talon) intakePivotMotor);
        
        intakeUpperLimit = new DigitalInput(12);
        LiveWindow.addSensor("Intake", "UpperLimit", intakeUpperLimit);
        
        intakeLowerLimit = new DigitalInput(13);
        LiveWindow.addSensor("Intake", "LowerLimit", intakeLowerLimit);
        
        climberExtendPiston = new Solenoid(0, 3);
        LiveWindow.addActuator("Climber", "ExtendPiston", climberExtendPiston);
        
        climberWinchMotor = new Talon(6);
        LiveWindow.addActuator("Climber", "WinchMotor", (Talon) climberWinchMotor);
        
        climberRungDetector = new DigitalInput(14);
        LiveWindow.addSensor("Climber", "RungDetector", climberRungDetector);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
