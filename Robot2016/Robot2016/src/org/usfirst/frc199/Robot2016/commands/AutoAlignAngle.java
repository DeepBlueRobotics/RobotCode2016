// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2016.commands;

import org.usfirst.frc199.Robot2016.Robot;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class AutoAlignAngle extends Command {

	private static final String LEFT = "left";
	private static final String RIGHT = "right";
	String direction;
	boolean targetAcquired;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	public AutoAlignAngle() {
		direction = "";
		targetAcquired = false;
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutoAlignAngle(String position) {
		// Position = "2" "3" "4" "5"
		if (position.equals("2") || position.equals("3"))
			direction = RIGHT;
		if (position.equals("4") || position.equals("4"))
			direction = LEFT;
		targetAcquired = true;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.drivetrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		
		// What if the range finder is off the field
    	if(!targetAcquired){
    		if(Robot.drivetrain.getRangeFinderInchesLeft() > 31 * 12){
    			direction = RIGHT;
    		}else if(Robot.drivetrain.getRangeFinderInchesRight() > 31 * 12){
    			direction = LEFT;
    		}else{
	    		// SmartDashboard button for driver to choose left/right
    		}
    	}
    }

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(direction.equals(LEFT)){
			
			// Rotate towards left
			Robot.drivetrain.arcadeInput(0, -1);
			if(Robot.vision.isTargetInVisionOfRobotCamera()){
				end();
			}
			
		}else if(direction.equals(RIGHT)){
			
			// Rotate towards right
			Robot.drivetrain.arcadeInput(0, 1);
			if(Robot.vision.isTargetInVisionOfRobotCamera()){
				end();
			}
			
		}else{
			end();
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.arcadeInput(0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
