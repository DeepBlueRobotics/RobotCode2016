// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc199.Robot2016;

import org.usfirst.frc199.Robot2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc199.Robot2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick manipulator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        manipulator = new Joystick(2);
        
        rightJoystick = new Joystick(1);
        
        leftJoystick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("AutoMode", new AutoMode());
        SmartDashboard.putData("AutoDelay", new AutoDelay());
        SmartDashboard.putData("AutoDrive", new AutoDrive());
        SmartDashboard.putData("AutoTurn", new AutoTurn());
        SmartDashboard.putData("AutoAlignDistance", new AutoAlignDistance());
        SmartDashboard.putData("AutoAlignAngle", new AutoAlignAngle());
        SmartDashboard.putData("TeleopDriveMode", new TeleopDriveMode());
        SmartDashboard.putData("IntakeBoulder", new IntakeBoulder());
        SmartDashboard.putData("PrepareToShootLow", new PrepareToShootLow());
        SmartDashboard.putData("PrepareToShootHigh", new PrepareToShootHigh());
        SmartDashboard.putData("TriggerShooter", new TriggerShooter());
        SmartDashboard.putData("LowerIntake", new LowerIntake());
        SmartDashboard.putData("RaiseIntake", new RaiseIntake());
        SmartDashboard.putData("IntakeManualControl", new IntakeManualControl());
        SmartDashboard.putData("ShooterManualControl", new ShooterManualControl());
        SmartDashboard.putData("RaiseShooter", new RaiseShooter());
        SmartDashboard.putData("LowerShooter", new LowerShooter());
        SmartDashboard.putData("ExtendClimber", new ExtendClimber());
        SmartDashboard.putData("RetractClimber", new RetractClimber());
        SmartDashboard.putData("UpdateDashboard", new UpdateDashboard());
        SmartDashboard.putData("StartCompressor", new StartCompressor());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

    public Joystick getManipulator() {
        return manipulator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

